import streamlit as st
import os
import subprocess
import pandas as pd
from glob import glob

##############################################################################################################
# File Upload and Script Management

st.title("R Script Dashboard")

# Set the directory where the data is located
data_directory = st.text_input("Enter the directory for data files", "M:/SEZ DES/Science and Monitoring (SM)/Workstreams/Environmental Monitoring/Marine/001DATA")

# Set the script storage path
script_storage = "scripts/"
if not os.path.exists(script_storage):
    os.makedirs(script_storage)

# Script upload section
st.header("Upload and Manage R Scripts")
uploaded_file = st.file_uploader("Upload your R script", type="R")

if uploaded_file is not None:
    # Save the uploaded script
    script_path = os.path.join(script_storage, uploaded_file.name)
    with open(script_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    st.success(f"Uploaded script: {uploaded_file.name}")

# Select the script to run
scripts = os.listdir(script_storage)
if scripts:
    selected_script = st.selectbox("Select a script to run", scripts)

    if selected_script:
        st.write(f"Selected script: {selected_script}")
else:
    st.warning("No scripts found. Please upload a script.")

##############################################################################################################
# Running the Script and Displaying Outputs

st.header("Run Script and View Results")

# Button to run the selected script
if st.button("Run Script"):
    script_path = os.path.join(script_storage, selected_script)

    if os.path.exists(script_path):
        try:
            # Running the R script using subprocess
            result = subprocess.run(["Rscript", script_path], capture_output=True, text=True, check=True)
            st.write("Script executed successfully!")
            st.text(result.stdout)
        except subprocess.CalledProcessError as e:
            st.error(f"Error running script: {e.stderr}")
    else:
        st.error("The script file was not found.")

##############################################################################################################
# Visualize Script Outputs

st.header("Visualize Script Outputs")

# Check if the directory is valid
if os.path.exists(data_directory):
    # Display any output files generated by the script
    output_files = glob(os.path.join(data_directory, "*"))

    if output_files:
        for file in output_files:
            if file.endswith(".jpeg") or file.endswith(".png"):
                st.image(file)
            elif file.endswith(".csv"):
                df = pd.read_csv(file)
                st.dataframe(df)
            elif file.endswith(".xlsx"):
                df = pd.read_excel(file)
                st.dataframe(df)
            # Add other file types if necessary
    else:
        st.warning("No output files found in the directory.")
else:
    st.error("The specified data directory does not exist. Please check the path.")

##############################################################################################################
# Script Persistence and Change Management

st.header("Script Change Management")

# Admin panel to update or remove scripts
if st.checkbox("Admin Mode"):
    st.subheader("Manage Scripts")

    # Option to remove scripts
    if scripts:
        script_to_delete = st.selectbox("Select a script to delete", scripts)
        if st.button("Delete Script"):
            script_delete_path = os.path.join(script_storage, script_to_delete)
            if os.path.exists(script_delete_path):
                os.remove(script_delete_path)
                st.success(f"Deleted script: {script_to_delete}")
            else:
                st.error("Script file not found.")
    else:
        st.warning("No scripts available to delete.")